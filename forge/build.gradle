
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.0"
}

apply plugin: "java"
apply plugin: "architectury-plugin"
apply plugin: "maven-publish"
apply plugin: "dev.architectury.loom"

archivesBaseName = rootProject.archives_base_name
version = rootProject.mod_version //FIXME: HERE repeated def
group = rootProject.maven_group

version = rootProject.mod_version+"-"+rootProject.minecraft_version+"-"+new Date().format("yyyy_MM_dd_HH_mm")


loom {
    silentMojangMappingsLicense()
    accessWidenerPath.set(project(":common").file("src/main/resources/${acsessWidenerVersion}.lod.accesswidener"))
    forge {
        convertAccessWideners.set(true)
        extraAccessWideners.add("lod.accesswidener")
        mixinConfigs("lod.mixins.json")
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowMe
    implementation.extendsFrom shadowMe

    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

java {
    withSourcesJar()
}
jar.dependsOn(project(":core").remapJar)
remapSourcesJar.dependsOn(project(":core").remapJar)

def addMod(path, enabled) {
    if (enabled == "2")
        dependencies { modImplementation(path) }
    else if (enabled == "1")
        dependencies { modCompileOnly(path) }
}

dependencies {

    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    // The following line declares the mojmap mappings & parchment mappings
    mappings loom.layered() {
        // Mojmap mappings
        officialMojangMappings()
        // Parchment mappings (it adds parameter mappings & javadoc)
        if (rootProject.minecraft_version != "1.19" && rootProject.minecraft_version != "1.19.1")
            parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchment_version}@zip")
        else
            parchment("org.parchmentmc.data:parchment-1.18.2:${rootProject.parchment_version}@zip") // As 1.19 dosnt have parchment mappings yet, we use 1.18.2 mapping
    }

    //Manifold
    annotationProcessor "systems.manifold:manifold-preprocessor:${rootProject.manifold_version}"

    // Toml
    implementation("com.electronwill.night-config:toml:${rootProject.toml_version}")

    common(project(":core")) { transitive false }

    // Forge loader
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    // Starlight
    addMod("curse.maven:starlight-forge-526854:${rootProject.starlight_version_forge}", rootProject.enable_starlight_forge)
    annotationProcessor "org.spongepowered:mixin:0.8.4:processor"

    addMod("curse.maven:TerraForged-363820:${rootProject.terraforged_version}", rootProject.enable_terraforged)

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowMe(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
    shadowMe files(project(":core").file("build/libs/DistantHorizons-${rootProject.mod_version}.jar"))

//    forgeDependencies(project(":core")) { transitive false }


    // Toml
    shadowMe("com.electronwill.night-config:toml:${rootProject.toml_version}") {}

    // Compression
    forgeDependencies('org.tukaani:xz:1.9')
    forgeDependencies('org.apache.commons:commons-compress:1.21')
    shadowMe 'org.tukaani:xz:1.9'
    shadowMe 'org.apache.commons:commons-compress:1.21'
}

// Copies the correct accesswidener and renames it
task copyAccessWidener(type: Copy) {
    from project(":common").file("src/main/resources/${rootProject.acsessWidenerVersion}.lod.accesswidener")
    into(file("build/resources/main"))
    rename "${rootProject.acsessWidenerVersion}.lod.accesswidener", "lod.accesswidener"
}

task copyCoreResources(type: Copy) {
    from fileTree(project(":core").file("src/main/resources"))
    into file("build/resources/main")
}

task copyCommonResources(type: Copy) {
    from fileTree(project(":common").file("src/main/resources"))
    into file("build/resources/main")
}

// Put stuff from gradle.properties into the mod info
processResources {
    dependsOn(copyAccessWidener)
    dependsOn(copyCoreResources)
    dependsOn(copyCommonResources)

    def resourceTargets = ["fabric.mod.json", "META-INF/mods.toml"] // Location of where to put
    def intoTargets = ["$buildDir/resources/main/"] // Location of the built resources folder
    def replaceProperties = [
            version                      : mod_version,
            mod_name                     : mod_name,
            authors                      : mod_authors,
            description                  : mod_description,
            homepage                     : mod_homepage,
            source                       : mod_source,
            issues                       : mod_issues,
            minecraft_version            : minecraft_version,
            compatible_minecraft_versions: compatible_minecraft_versions,
            java_version                 : java_version
    ]
    // The left side is what gets replaced in the mod info and the right side is where to get it from in the gradle.properties
    //TODO: Make Forge loader version also be relaced with non hardcoded value instead of "[36,42)"

    inputs.properties replaceProperties
    replaceProperties.put 'project', project
    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

shadowJar {
    dependencies {
        exclude(dependency("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"))
    }
    exclude "fabric.mod.json"
    configurations = [project.configurations.shadowMe]
    relocate 'org.tukaani', 'shaded.tukaani'
    relocate 'org.apache.commons.compress', 'shaded.apache.commons.compress'
    relocate 'com.electronwill.nightconfig', 'shaded.electronwill.nightconfig'    // This is already included with forge

    relocate 'com.seibel.lod.common', 'forge.com.seibel.lod.common'

    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    manifest {
        attributes 'Implementation-Title': rootProject.archives_base_name,
                'Implementation-Version': rootProject.mod_version,
                'Main-Class': 'com.seibel.lod.core.JarMain' // When changing the main of the jar change this line
    }
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

task printConfigurations {
    doLast {task ->
        println "Project Name: $name configurations:"
        configurations.each {
            println "    $it.name"
        }
    }
}

repositories {
    mavenCentral()

    // For parchment mappings
    maven { url "https://maven.parchmentmc.org" }

    // used to download and compile dependencies from git repos
    maven { url 'https://jitpack.io' }

    // For Manifold Preprocessor
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }

    // Required for importing Modrinth mods
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }

    // Required for importing CursedForge mods
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    // These 2 are for importing mods that arnt on CursedForge, Modrinth, GitHub, GitLab or anywhere opensource
    flatDir {
        dirs "${rootDir}/mods/fabric"
        content {
            includeGroup "fabric-mod"
        }
    }
    flatDir {
        dirs "${rootDir}/mods/forge"
        content {
            includeGroup "forge-mod"
        }
    }
}

tasks.withType(JavaCompile) {
    // Add Manifold Preprocessor
//		def excapedMCVersion = rootProject.minecraft_version.replace(".", "_")
//		options.compilerArgs += ['-Xplugin:Manifold', "-AMC_VERSION_${excapedMCVersion}"]
//
    //options.compilerArgs += ['-deprecation']
    //options.compilerArgs += ['-verbose']
    //options.compilerArgs += ['-Xlint:unchecked']
    //options.compilerArgs += ['-Xdiags:verbose']
    //options.compilerArgs += ['-Xprint']
    //options.compilerArgs += ['-XprintProcessorInfo']
    //options.compilerArgs += ['-XprintRounds']

    // println options.compilerArgs

    // Set the java version
    options.compilerArgs += ['-Xplugin:Manifold']
    options.release = rootProject.java_version as Integer //FIXME: This warning??

    // TODO: make everything use java 8
    //        options.release = 8 // Use Java 8 for everything so back porting is easier?
}
