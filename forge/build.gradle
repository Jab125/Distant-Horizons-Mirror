version = rootProject.mod_version+"-"+rootProject.minecraft_version+"-"+new Date().format("yyyy_MM_dd_HH_mm")

loom {
    forge {
        convertAccessWideners.set(true)
        extraAccessWideners.add("lod.accesswidener")
        mixinConfigs("lod.mixins.json")
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    // TODO: Add the commented things once we update architectury to 11 or higher
//    common
//    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

def addMod(path, enabled) {
    if (enabled == "2")
        dependencies { modImplementation(path) }
    else if (enabled == "1")
        dependencies { modCompileOnly(path) }
}

dependencies {
    // Forge loader
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    // Architectury API
    if (minecraft_version == "1.16.5") {
        modImplementation("me.shedaniel:architectury-forge:${rootProject.architectury_version}")
    } else {
        modImplementation("dev.architectury:architectury-forge:${rootProject.architectury_version}")
    }

    // Starlight
    addMod("curse.maven:starlight-forge-526854:${rootProject.starlight_version_forge}", rootProject.enable_starlight_forge)
    annotationProcessor "org.spongepowered:mixin:0.8.4:processor"

    addMod("curse.maven:TerraForged-363820:${rootProject.terraforged_version}", rootProject.enable_terraforged)

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowMe(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
    
    // Ran's scuffed 1.19 stuff
    shadowMe files(project(":core").file("build/libs/DistantHorizons-${rootProject.mod_version}.jar"))
}

processResources {
    dependsOn(copyAccessWidener)
    dependsOn(copyCoreResources)
    dependsOn(copyCommonResources)
}

// Ran's scuffed 1.19 stuff
jar.dependsOn(project(":core").remapJar)
remapSourcesJar.dependsOn(project(":core").remapJar)

shadowJar {
    // Remove the fabric stuff from forge
    dependencies {
        exclude(dependency("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"))
    }
    exclude "fabric.mod.json"
    configurations = [project.configurations.shadowMe]

    // Our own code
    relocate 'com.seibel.lod.common', 'forge.com.seibel.lod.common'

    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
