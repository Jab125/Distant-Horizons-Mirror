unimined.minecraft {
    minecraftForge {
        loader forge_version
        mixinConfig("DistantHorizons.forge.mixins.json")
        accessTransformer(aw2at(project(":common").file("src/main/resources/${accessWidenerVersion}.distanthorizons.accesswidener")))
    }
}


def addMod(path, enabled) {
    if (enabled == "2")
        dependencies { modImplementation(path) }
    else if (enabled == "1")
        dependencies { compileOnly(path) }
}
dependencies {
    // Architectury API
//    if (minecraft_version == "1.16.5") {
//        implementation("me.shedaniel:architectury-forge:${rootProject.architectury_version}")
//    } else {
//        implementation("dev.architectury:architectury-forge:${rootProject.architectury_version}")
//    }

    // Starlight
    addMod("curse.maven:starlight-forge-526854:${rootProject.starlight_version_forge}", rootProject.enable_starlight_forge)
//    annotationProcessor "org.spongepowered:mixin:0.8.4:processor"

    addMod("curse.maven:TerraForged-363820:${rootProject.terraforged_version}", rootProject.enable_terraforged)

    addMod("curse.maven:TerraFirmaCraft-302973:4616004", rootProject.enable_terrafirmacraft)
    
//    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

//    if (System.getProperty("idea.sync.active") != "true") {
//        annotationProcessor "org.spongepowered:mixin:0.8.4:processor"
//    }
}

tasks.register('copyAllResources') {
    dependsOn(copyCoreResources)
    dependsOn(copyCommonLoaderResources)
}

tasks.build.doLast {
    copy {
        from file("build/resources/main")
        into file("build/sourcesSets/main")
    }
    
    // TODO may not be necessary since we also do this before runClient
    delete file("../common/build/libs")
    delete file("../coreSubProjects/core/build/libs")
    delete file("../coreSubProjects/api/build/libs")
}



processResources {
    dependsOn(tasks.named('copyAllResources'))
}

afterEvaluate {
    runClient {
        dependsOn(tasks.named('copyAllResources'))
    }
    
    // TODO this isn't a great place for these, but `tasks.build.doLast` doesn't always work and I'm not sure of a better place right now
    tasks.runClient.doFirst {
        // copy the resources into the sourceSets folder so Forge can access them
        copy {
            from file("build/resources/main")
            into file("build/sourcesSets/main")
        }
        
        // TODO can we just ignore these folders instead?
        //  deleting them may cause issues if the OS locks the files
        //  and it feels hacky
        delete file("../common/build/libs")
        delete file("../coreSubProjects/core/build/libs")
        delete file("../coreSubProjects/api/build/libs")
    }
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
//    classifier null
}


sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

//components.java {
//    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
//        skip()
//    }
//}



// TODO this was specifically added for MC 1.20.4 and should probably be disabled for all MC versions below
// source: https://github.com/MinecraftForge/MinecraftForge/blob/5d0047753dfac0caaf5d97cc3f5c9a8b0990cb44/mdk/build.gradle#L209-L217
//
// Merge the resources and classes into the same directory. 
// This is done because java expects modules to be in a single directory.
// And if we have it in multiple we have to do performance intensive hacks like having the UnionFileSystem
// This will eventually be migrated to ForgeGradle so modders don't need to manually do it. But that is later.
sourceSets.each {
    // all of our code and resources should be in the sourceSets/main/ folder for Forge 1.20.4+
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    println "source name: [" + it.name  + "]"// as of 2024-2-4 "it.name" only returned "main" and "test"
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

