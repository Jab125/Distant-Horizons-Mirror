plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

loom {
    accessWidenerPath.set(project(":common").file("src/main/resources/lod.accesswidener"))

    forge {
        convertAccessWideners.set(true)
        extraAccessWideners.add("lod.accesswidener")
        mixinConfigs("lod.mixins.json")
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowMe // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
    implementation.extendsFrom shadowMe
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowMe(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    common(project(":core"))
    shadowMe(project(":core"))
    forgeDependencies(project(":core"))

    forgeDependencies('org.tukaani:xz:1.9')
    forgeDependencies('org.apache.commons:commons-compress:1.21')
    shadowMe 'org.tukaani:xz:1.9'
    shadowMe 'org.apache.commons:commons-compress:1.21'
}

shadowJar {
    dependencies {
        exclude(dependency("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"))
    }
    exclude "fabric.mod.json"
    configurations = [project.configurations.shadowMe]
    relocate 'org.tukaani', 'shaded.tukaani'
    relocate 'org.apache.commons.compress', 'shaded.apache.commons.compress'

    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
