unimined.minecraft {
    neoForged {
        loader neoforge_version
        mixinConfig("DistantHorizons.neoforge.mixins.json")
        accessTransformer(aw2at(
                project(":common").file("src/main/resources/${accessWidenerVersion}.distanthorizons.accesswidener"), 
                file("build/sourcesSets/main/META-INF/accesstransformer.cfg") // We'd wanna output the access transformer to somewhere where it'll only appear in the final jar
        ))
    }
}


def addMod(path, enabled) {
    if (enabled == "2")
        dependencies { modImplementation(path) }
    else if (enabled == "1")
        dependencies { compileOnly(path) }
}
dependencies {
    // Architectury API
//    if (minecraft_version == "1.16.5") {
//        implementation("me.shedaniel:architectury-forge:${rootProject.architectury_version}")
//    } else {
//        implementation("dev.architectury:architectury-forge:${rootProject.architectury_version}")
//    }

    // Starlight
    addMod("curse.maven:starlight-forge-526854:${rootProject.starlight_version_forge}", rootProject.enable_starlight_forge)
//    annotationProcessor "org.spongepowered:mixin:0.8.4:processor"

    addMod("curse.maven:TerraForged-363820:${rootProject.terraforged_version}", rootProject.enable_terraforged)

    addMod("curse.maven:TerraFirmaCraft-302973:4616004", rootProject.enable_terrafirmacraft)

//    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

//    if (System.getProperty("idea.sync.active") != "true") {
//        annotationProcessor "org.spongepowered:mixin:0.8.4:processor"
//    }
}

task deleteResources(type: Delete) {
    delete file("build/resources/main")
}

tasks.register('copyAllResources') {
    dependsOn(copyCoreResources)
    dependsOn(copyCommonLoaderResources)
}

processResources {
    dependsOn(tasks.named('copyAllResources'))
}

afterEvaluate {
    runClient {
        dependsOn(tasks.named('copyAllResources'))
        finalizedBy(deleteResources)
    }
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
//    classifier null
}


sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

//components.java {
//    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
//        skip()
//    }
//}