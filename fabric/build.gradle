version = rootProject.versionStr

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // The addModJar basically embeds the mod to the built jar
    addModJar
    include.extendsFrom addModJar
    modImplementation.extendsFrom addModJar
}

def addMod(path, enabled) {
    if (enabled == "2")
        dependencies { modImplementation(path) }
    else if (enabled == "1")
        dependencies { modCompileOnly(path) }
}

dependencies {
    // Fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    // Architectury API
    if (minecraft_version == "1.16.5") {
        addModJar("me.shedaniel:architectury-fabric:${rootProject.architectury_version}")
    } else {
        addModJar("dev.architectury:architectury-fabric:${rootProject.architectury_version}")
    }

    // Fabric API
    addModJar(fabricApi.module("fabric-lifecycle-events-v1", rootProject.fabric_api_version))
    addModJar(fabricApi.module("fabric-key-binding-api-v1", rootProject.fabric_api_version))
    addModJar(fabricApi.module("fabric-resource-loader-v0", rootProject.fabric_api_version))
    addModJar(fabricApi.module("fabric-rendering-v1", rootProject.fabric_api_version)) // TODO: Remove this as it is only needed in 1 line (FabricClientProxy)
    addModJar(fabricApi.module("fabric-api-base", rootProject.fabric_api_version))

    // Mod Menu
    modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}")

    // Starlight
    addMod("curse.maven:starlight-521783:${rootProject.starlight_version_fabric}", rootProject.enable_starlight)

    // Phosphor
    addMod("curse.maven:phosphor-372124:${rootProject.phosphor_version_fabric}", rootProject.enable_phosphor)

    // Sodium
    addMod("maven.modrinth:sodium:${rootProject.sodium_version}", rootProject.enable_sodium)
//    if (rootProject.enable_sodium != "0") {
//        implementation "org.joml:joml:1.10.2"
//        modImplementation(fabricApi.module("fabric-rendering-data-attachment-v1", rootProject.fabric_api_version))
//        modImplementation(fabricApi.module("fabric-rendering-fluids-v1", rootProject.fabric_api_version))
//    }

	// Lithium
    addMod("maven.modrinth:lithium:${rootProject.lithium_version}", rootProject.enable_lithium)

    // Iris
    addMod("maven.modrinth:iris:${rootProject.iris_version}", rootProject.enable_iris)

    // BCLib
    addMod("com.github.paulevsGitch:BCLib:${rootProject.bclib_version}", rootProject.enable_bclib)

    // Immersive Portals
    /*
    modImplementation("com.github.qouteall.ImmersivePortalsMod:build:${rootProject.immersive_portals_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        transitive(false)
    }
    modImplementation("com.github.qouteall.ImmersivePortalsMod:imm_ptl_core:${rootProject.immersive_portals_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        transitive(false)
    }
    modImplementation("com.github.qouteall.ImmersivePortalsMod:q_misc_util:${rootProject.immersive_portals_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        transitive(false)
    }
    */

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon, project.configurations.shadowMe, project.configurations.customModule]

    // Compression
    relocate 'org.tukaani', 'distanthorizons.libraries.tukaani'
    relocate 'org.apache.commons.compress', 'distanthorizons.libraries.apache.commons.compress'

    // Toml & Json for config
    relocate 'com.electronwill.nightconfig', 'distanthorizons.libraries.electronwill.nightconfig'

    // FIXME: This is a massive library that is located in lots of different spots
    relocate 'com.googlecode.json-simple', 'distanthorizons.libraries.googlecode.json-simple'
    relocate 'org.json.simple', 'distanthorizons.libraries.json.simple'

    // Theming
    relocate 'com.formdev.flatlaf', 'distanthorizons.libraries.formdev.flatlaf'

    // SVG
    relocate 'com.kitfox.svg', 'distanthorizons.libraries.kitfox.svg'

    classifier "dev-shadow"
    mergeServiceFiles()
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

task deleteResources(type: Delete) {
    delete file("build/resources/main")
}

processResources {
    dependsOn(copyCoreResources)
}

runClient {
    dependsOn(copyCoreResources)
    jvmArgs "-XX:-OmitStackTraceInFastThrow"
    finalizedBy(deleteResources)
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
