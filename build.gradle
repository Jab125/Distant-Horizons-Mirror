plugins {
    id "java"

    // Plugin to handle dependencies
    id "com.github.johnrengelman.shadow" version '7.0.0' apply false

    // Plugin to create merged jars
    id "io.github.pacifistmc.forgix" version "1.2.6"

    // Manifold preprocessor
    id "systems.manifold.manifold-gradle-plugin" version "0.0.2-alpha"

    // Provides mc libraries to core
//    id "org.spongepowered.gradle.vanilla" version '0.2.1-SNAPSHOT' apply false
}

/**
 * Creates the list of preprocessors to use.
 *
 * @param mcVers array of all MC versions
 * @param mcIndex array index of the currently active MC version
 */
def writeBuildGradlePredefine(List<String> mcVers, int mcIndex) {
    ArrayList<String> redefineList = new ArrayList<String>()

    for (int i=0; i<mcVers.size(); i++) {
        String mcStr = mcVers[i].replace(".", "_")
        if (mcIndex<i) {
            redefineList.add("PRE_MC_"+mcStr)
        }
        if (mcIndex==i) {
            redefineList.add("MC_"+mcStr)
        }
        if (mcIndex>=i) {
            redefineList.add("POST_MC_"+mcStr)
        }
    }

    // Build the list of preprocessors to use
    StringBuilder sb = new StringBuilder()

    sb.append("# DON'T TOUCH THIS FILE, This is handled by the build script\n")

    // Check if this is a development build
    if (mod_version.toLowerCase().contains("dev")) {
        // WARNING: only use this for logging, we don't want to have confusion
        // when a method doesn't work correctly in the release build.
        sb.append("DEV_BUILD")
        sb.append("=\n")
    }

    // Build the MC version preprocessors
    for (String redefinedVersion : redefineList) {
        sb.append(redefinedVersion)
        sb.append("=\n")
    }
    new File(projectDir, "build.properties").text = sb.toString()
}

// Sets up the variables for Manifold in the code
def loadProperties() {
    def defaultMcVersion = "1.18.2" // 1.18.2 is our current most stable version so we use that if no version was defined

    def mcVersion = ""
    def mcVers = fileTree("versionProperties").files.name // Get all the files in "versionProperties"
    for (int i = 0; i < mcVers.size(); i++) {
        mcVers[i] = mcVers[i].replaceAll(".properties", "") // As we are getting the file names, we should remove the ".properties" at the end to get the versions
    }
    int mcIndex = -1
    println "Avalible MC versions: ${mcVers}"
    if (project.hasProperty("mcVer")) {
        mcVersion = mcVer
        mcIndex = mcVers.indexOf(mcVer)
    }
    if (mcIndex == -1) {
        println "No mcVer set or the set mcVer is invalid! Defaulting to ${defaultMcVersion}."
        println "Tip: Use -PmcVer=\"${defaultMcVersion}\" in cmd arg to set mcVer."
        mcVersion = defaultMcVersion
        mcIndex = mcVers.indexOf(defaultMcVersion)
        assert mcIndex != -1
    }

	println "Loading properties file at " + mcVersion + ".properties"
	def props = new Properties()
	props.load(new FileInputStream("$rootProject.rootDir/versionProperties/"+"$mcVersion"+".properties"))

    props.each { prop ->
      rootProject.ext.set(prop.key, prop.value)
	  // println "Added prop [key:" + prop.key + ", value:" + prop.value + "]"
    }
    writeBuildGradlePredefine(mcVers, mcIndex)
}

loadProperties()




// Sets up the version string (the name we use for our jar)
rootProject.versionStr = rootProject.mod_version + "-" + rootProject.minecraft_version // + "-" + new Date().format("yyyy_MM_dd_HH_mm")
// Forgix settings (used for merging jars)
forgix {
    group = "com.seibel.lod"
    mergedJarName = "DistantHorizons-${rootProject.versionStr}.jar"
    
    forge {
        jarLocation = "build/libs/DistantHorizons-${rootProject.versionStr}.jar"
    }

    fabric {
        jarLocation = "build/libs/DistantHorizons-${rootProject.versionStr}.jar"
    }

    removeDuplicate "com.seibel.lod.api"
    removeDuplicate "com.seibel.lod.core"
}


subprojects { p ->
    // Apply plugins
    apply plugin: "java"
    apply plugin: "systems.manifold.manifold-gradle-plugin"
    apply plugin: "com.github.johnrengelman.shadow"
//    apply plugin: "org.spongepowered.gradle.vanilla" // Provides minecraft libraries
    if (p == project(":core")) {
        apply plugin: "application"
    }

    // Set the manifold version (may not be required tough)
    manifold {
        manifoldVersion = rootProject.manifold_version
    }

    // Does the same as "p == project(":common") || p == project(":fabric") || p == project(":quilt")  || p == project(":forge")"
    // Useful later on so we dont have duplicated code
    def isMinecraftSubProject = p != project(":core") && p != project(":api")


    // set up custom configurations (configurations are a way to handle dependencies) 
    configurations {
        // extends the shadowJar configuration 
        shadowMe
        // have implemented dependencies automatically embedded in the final jar
        implementation.extendsFrom(shadowMe)
        
        customModule
        implementation.extendsFrom(customModule)

        if (p != project(":api") && p != project(":core")) {
            // Shadow common
            common
            shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
            compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            developmentForge.extendsFrom common
        }
    }


    // Let the application plugin know where the main class is
    // (This will point to a non-existent class in all sub-projects except "Core")
    if (p == project(":core")) {
        application {
            mainClass.set('com.seibel.lod.core.jar.JarMain')
        }
    }

    dependencies {
        //=====================//
        // shared dependencies //
        //=====================//
        

        // Manifold
        annotationProcessor("systems.manifold:manifold-preprocessor:${rootProject.manifold_version}")

        // JUnit tests
        implementation("org.junit.jupiter:junit-jupiter:5.8.2")
        implementation("org.junit.jupiter:junit-jupiter-engine:5.8.2")
        implementation("junit:junit:4.13")
        
        // Compression
        shadowMe("org.tukaani:xz:1.9")
        shadowMe("org.apache.commons:commons-compress:1.21")

        // NightConfig (includes Toml & Json)
        shadowMe("com.electronwill.night-config:toml:${rootProject.nightconfig_version}")
        shadowMe("com.electronwill.night-config:json:${rootProject.nightconfig_version}")

        // Theming
        shadowMe("com.formdev:flatlaf:${rootProject.flatlaf_version}")

        // SVG
        shadowMe("com.formdev:flatlaf-extras:${rootProject.flatlaf_version}")
        shadowMe("com.formdev:svgSalamander:${rootProject.svgSalamander_version}")
        
        
        
        //==========================//
        // conditional dependencies //
        //==========================//

        // Add core
        if (isMinecraftSubProject) {
            implementation(project(":core")) {
                // Remove Junit test libraries
                exclude group: "org.junit.jupiter", module: "junit-jupiter"
                exclude group: "org.junit.jupiter", module: "junit-jupiter-engine"
                exclude group: "junit", module: "junit"
            }
        }

        // Add the api
        if (p != project(":api")) {
            implementation(project(":api")) {
                // Remove Junit test libraries
                exclude group: "org.junit.jupiter", module: "junit-jupiter"
                exclude group: "org.junit.jupiter", module: "junit-jupiter-engine"
                exclude group: "junit", module: "junit"
            }
        }
    }

    // Adds the standalone jar's entrypoint
    jar {
        manifest {
            attributes 'Implementation-Title': rootProject.mod_name,
                    'Implementation-Version': rootProject.mod_version,
                    'Main-Class': 'com.seibel.lod.core.jar.JarMain' // When changing the main of the jar change this line
        }
    }

    // this can be un-commented if we ever wanted to make DH modular (AKA use a module-info.java file) again
    /*
    // Tells gradle where to look for other modules
    // Why isn't the classpath added to the modules path by default?
    if (p == project(":core")) {
        compileJava {
            inputs.property('moduleName', 'dhApi')
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath
                ]
                classpath = files()
            }
        }
    }
    */

    // Run mergeJars when running build
    if (isMinecraftSubProject) {
        build.finalizedBy(mergeJars)
        assemble.finalizedBy(mergeJars)
    }
}

allprojects { p ->
    apply plugin: "java"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.mod_name
    version = rootProject.mod_version
    group = rootProject.maven_group


    // Does the same as "p == project(":common") || p == project(":fabric") || p == project(":quilt")  || p == project(":forge")"
    // Useful later on so we dont have duplicated code
    def isMinecraftSubProject = p != project(":core") && p != project(":api")

    repositories {
        mavenCentral()

        // For parchment mappings
        maven { url "https://maven.parchmentmc.org" }

        // For Architectury API
//        maven { url "https://maven.architectury.dev" }

        // For Git repositories
        maven { url "https://jitpack.io" }

        // For Manifold Preprocessor
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }

        // Required for importing Modrinth mods
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }

        // Required for importing CursedForge mods
        maven {
            url "https://www.cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }

        // Required for ModMenu
        maven { url "https://maven.terraformersmc.com/" }

        // Required for Mixins & VanillaGradle
        maven { url "https://repo.spongepowered.org/maven/" }

        // Required for Canvas (mod)
        maven { url "https://maven.vram.io/" }

        // These 2 are for importing mods that arnt on CursedForge, Modrinth, GitHub, GitLab or anywhere opensource
        flatDir {
            dirs "${rootDir}/mods/fabric"
            content {
                includeGroup "fabric-mod"
            }
        }
        flatDir {
            dirs "${rootDir}/mods/forge"
            content {
                includeGroup "forge-mod"
            }
        }
    }


    // Only uncomment this when testing stuff with lwjgl in the core jar
    /*
    if (p == project(":core")) {
        dependencies {
            project.ext.lwjglNatives = "natives-linux"

            implementation platform("org.lwjgl:lwjgl-bom:3.3.0")

            implementation "org.lwjgl:lwjgl"
            implementation "org.lwjgl:lwjgl-assimp"
            implementation "org.lwjgl:lwjgl-glfw"
            implementation "org.lwjgl:lwjgl-openal"
            implementation "org.lwjgl:lwjgl-opengl"
            implementation "org.lwjgl:lwjgl-stb"
            implementation "org.lwjgl:lwjgl-tinyfd"
            runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
            runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
            runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
            runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
            runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
            runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
            runtimeOnly "org.lwjgl:lwjgl-tinyfd::$lwjglNatives"
            implementation "org.joml:joml:1.10.2"
        }
    }
     */

    // Put stuff from gradle.properties into the mod info
    processResources {
        def resourceTargets = ["fabric.mod.json", "quilt.mod.json", "META-INF/mods.toml"] // Location of where to inject the properties
        def intoTargets = ["$buildDir/resources/main/"] // Location of the built resources folder
        def replaceProperties = [
                version                      : mod_version,
                mod_name                     : mod_readable_name,
                authors                      : mod_authors,
                description                  : mod_description,
                homepage                     : mod_homepage,
                source                       : mod_source,
                issues                       : mod_issues,
                discord                      : mod_discord,
                minecraft_version            : minecraft_version,
                compatible_minecraft_versions: compatible_minecraft_versions,
                java_version                 : java_version
        ]
        // The left side is what gets replaced in the mod info and the right side is where to get it from in the gradle.properties
        //TODO: Make Forge loader version also be replaced with non hardcoded value instead of "[36,42)"

        inputs.properties replaceProperties
        replaceProperties.put 'project', project
        filesMatching(resourceTargets) {
            expand replaceProperties
        }

        intoTargets.each { target ->
            if (file(target).exists()) {
                copy {
                    from(sourceSets.main.resources) {
                        include resourceTargets
                        expand replaceProperties
                    }
                    into target
                }
            }
        }
    }

    task copyAccessWidener(type: Copy) {
        from project(":common").file("src/main/resources/${accessWidenerVersion}.lod.accesswidener")
        into(file(p.file("build/resources/main")))
        rename "${accessWidenerVersion}.lod.accesswidener", "lod.accesswidener"
    }

    task copyCoreResources(type: Copy) {
        from fileTree(project(":core").file("src/main/resources"))
        into p.file("build/resources/main")
    }

    tasks.withType(JavaCompile) {
        if (isMinecraftSubProject) {
            options.release = rootProject.java_version as Integer
            options.compilerArgs += ['-Xplugin:Manifold']
        } else {
//             options.release = 8; // Core & Api should use Java 8 no matter what
            // No it shouldn't cause it fails to find minecraft if it uses Java 8
            options.release = rootProject.java_version as Integer
            // TODO: Once the new build system is done, check if there is a way to make core/api only use java 8 again
        }
        options.encoding = "UTF-8"
    }

    java {
        withSourcesJar()
    }
}

// Delete the merged folder when running clean
task cleanMergedJars() {
    def mergedFolder = file("Merged")
    if (mergedFolder.exists()) {
        delete(mergedFolder)
    }
}
// add cleanMergedJars to the end of the "clean" task
tasks["clean"].finalizedBy(cleanMergedJars)
