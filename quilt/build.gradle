// Use this tutorial for quilt https://lambdaurora.dev/tools/import_quilt.html

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.0"
    id 'org.quiltmc.loom' version '0.12.+' // Required for the loader to work.
}

version = rootProject.mod_version+"-"+rootProject.minecraft_version+"-"+new Date().format("yyyy_MM_dd_HH_mm")

architectury {
    platformSetupLoomIde()
//    fabric()
}

configurations {
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common

    addModJar
    include.extendsFrom addModJar
    modImplementation.extendsFrom addModJar
}

repositories {
    // Required for ModMenu
    maven { url "https://maven.terraformersmc.com/" }

    maven {
        name 'Quilt'
        url 'https://maven.quiltmc.org/repository/release'
    }
}

def addMod(path, enabled) {
    if (enabled == "2")
        dependencies { modImplementation(path) }
    else if (enabled == "1")
        dependencies { modCompileOnly(path) }
}

dependencies {
    // Quilt loader
    modImplementation "org.quiltmc:quilt-loader:0.16.0-beta.7"

    // Quilt API
    modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:1.0.0-beta.7+0.51.1-1.18.2"

    // Mod Menu
    modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}")

    // Sodium
    addMod("curse.maven:sodium-394468:${rootProject.sodium_version}", rootProject.enable_sodium)
    implementation "org.joml:joml:1.10.2"


    // Toml
    shadowMe("com.electronwill.night-config:toml:${rootProject.toml_version}") {}

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowMe(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    // Compression
    common 'org.tukaani:xz:1.9'
    common 'org.apache.commons:commons-compress:1.21'
    shadowMe 'org.tukaani:xz:1.9'
    shadowMe 'org.apache.commons:commons-compress:1.21'
}

task deleteResources(type: Delete) {
    delete file("build/resources/main")
}

processResources {
    dependsOn(copyCoreResources)
    dependsOn(copyCommonResources)
    dependsOn(copyAccessWidener)
}

runClient {
    dependsOn(copyCoreResources)
    dependsOn(copyCommonResources)
    dependsOn(copyAccessWidener)
    jvmArgs "-XX:-OmitStackTraceInFastThrow"
    finalizedBy(deleteResources)
}

shadowJar {
    configurations = [project.configurations.shadowMe]
    relocate 'org.tukaani', 'shaded.tukaani'
    relocate 'org.apache.commons.compress', 'shaded.apache.commons.compress'
    relocate 'com.electronwill.nightconfig', 'shaded.electronwill.nightconfig'

    relocate 'com.seibel.lod.common', 'quilt.com.seibel.lod.common'

    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
