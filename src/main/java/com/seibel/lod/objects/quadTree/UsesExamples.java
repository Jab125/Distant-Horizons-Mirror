package com.seibel.lod.objects.quadTree;

import com.seibel.lod.builders.LodNodeBuilder;
import com.seibel.lod.objects.LodDimension;
import net.minecraft.client.Minecraft;
import net.minecraft.world.DimensionType;

import java.awt.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.Map;

public class UsesExamples {
    public static void main(String[] args){
        //THIS CODE DOESN'T WORK AT THE MOMENT
        /**TODO
         * Complete all the new Lod objects
         * Complete the getNodeToGenerate in LodQuadTreeDimension
         * Complete the getNodeToRender in LodQuadTreeDimension
         * Complete the node builder
         * Complete the new renderer
         * add everything to ClientProxy for the first test
         * */
/*
        LodQuadTreeWorld lodWorld = new LodQuadTreeWorld();
        LodQuadTreeDimension newLodDimension = new LodQuadTreeDimension(Minecraft.getInstance().world.getDimensionType(), Minecraft.getInstance().world, 10);
        lodWorld.addLodDimension(newLodDimension);

        LodQuadTreeDimension lodDimension = lodWorld.getLodDimension(Minecraft.getInstance().world.getDimensionType());
        lodDimension.move(0,0);

        //I will now generate some fake LodNodeData. This in the final implementation will be generated by a builder
        //this lodNodeData will be put at level 6 of the QuadTree. This LodNodeData represent a block of width

        LodNodeData lodNodeData1 = new LodNodeData((byte) 6, 4, 4, 64, 0, new Color(0,200,0),true);
        LodNodeData lodNodeData2 = new LodNodeData((byte) 6, 4, 5, 64, 0, new Color(0,200,0),true);
        LodNodeData lodNodeData3 = new LodNodeData((byte) 6, 5, 4, 64, 0, new Color(0,0,200),true);

        //add like this

        lodDimension.addNode(lodNodeData1);
        lodDimension.addNode(lodNodeData2);
        lodDimension.addNode(lodNodeData3);

        //Automatic generation

        List nodeToGenerate = (List) lodDimension.getRegion(0,0).getNodeToGenerate(0,0, (byte) 3,1000,0);
        Collections.sort(nodeToGenerate, Map.Entry.<LodNodeData, Integer>comparingByValue());


        // Call the builder to generate all the useful node

 */


    }
}
